import smartpy as sp

tstorage = sp.record(administrator = sp.address, burn_address = sp.address, distribution = sp.pair(sp.nat, sp.nat), failure_nft_base_url = sp.string, game_ledger = sp.big_map(sp.nat, sp.record(player = sp.address, redeemed = sp.bool, result = sp.nat, result_id = sp.nat).layout(("player", ("redeemed", ("result", "result_id"))))), game_price = sp.mutez, game_reward = sp.mutez, hux_amount = sp.nat, hux_contract_address = sp.address, last_failure_id = sp.nat, last_success_id = sp.nat, ledger = sp.big_map(sp.nat, sp.address), max_mint = sp.nat, metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), pause = sp.bool, success_nft_base_url = sp.string, token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("burn_address", ("distribution", ("failure_nft_base_url", ("game_ledger", ("game_price", ("game_reward", ("hux_amount", ("hux_contract_address", ("last_failure_id", ("last_success_id", ("ledger", ("max_mint", ("metadata", ("next_token_id", ("operators", ("pause", ("success_nft_base_url", "token_metadata")))))))))))))))))))
tparameter = sp.variant(balance_of = sp.record(callback = sp.contract(sp.list(sp.record(balance = sp.nat, request = sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id"))).layout(("request", "balance")))), requests = sp.list(sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id")))).layout(("requests", "callback")), default = sp.unit, mint = sp.record(metadata = sp.map(sp.string, sp.bytes), to_ = sp.address).layout(("metadata", "to_")), play = sp.unit, redeem = sp.list(sp.nat), toggle_pause = sp.bool, transfer = sp.list(sp.record(from_ = sp.address, txs = sp.list(sp.record(amount = sp.nat, to_ = sp.address, token_id = sp.nat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), update_operators = sp.list(sp.variant(add_operator = sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator"))), withdraw_hux = sp.nat, withdraw_tez = sp.mutez).layout(((("balance_of", "default"), ("mint", ("play", "redeem"))), (("toggle_pause", "transfer"), ("update_operators", ("withdraw_hux", "withdraw_tez")))))
tprivates = { "is_admin": sp.lambda_(sp.unit, sp.unit, with_storage="read-write", tstorage=sp.record(administrator = sp.address, burn_address = sp.address, distribution = sp.pair(sp.nat, sp.nat), failure_nft_base_url = sp.string, game_ledger = sp.big_map(sp.nat, sp.record(player = sp.address, redeemed = sp.bool, result = sp.nat, result_id = sp.nat).layout(("player", ("redeemed", ("result", "result_id"))))), game_price = sp.mutez, game_reward = sp.mutez, hux_amount = sp.nat, hux_contract_address = sp.address, last_failure_id = sp.nat, last_success_id = sp.nat, ledger = sp.big_map(sp.nat, sp.address), max_mint = sp.nat, metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), pause = sp.bool, success_nft_base_url = sp.string, token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("burn_address", ("distribution", ("failure_nft_base_url", ("game_ledger", ("game_price", ("game_reward", ("hux_amount", ("hux_contract_address", ("last_failure_id", ("last_success_id", ("ledger", ("max_mint", ("metadata", ("next_token_id", ("operators", ("pause", ("success_nft_base_url", "token_metadata")))))))))))))))))))), "is_paused": sp.lambda_(sp.unit, sp.unit, with_storage="read-write", tstorage=sp.record(administrator = sp.address, burn_address = sp.address, distribution = sp.pair(sp.nat, sp.nat), failure_nft_base_url = sp.string, game_ledger = sp.big_map(sp.nat, sp.record(player = sp.address, redeemed = sp.bool, result = sp.nat, result_id = sp.nat).layout(("player", ("redeemed", ("result", "result_id"))))), game_price = sp.mutez, game_reward = sp.mutez, hux_amount = sp.nat, hux_contract_address = sp.address, last_failure_id = sp.nat, last_success_id = sp.nat, ledger = sp.big_map(sp.nat, sp.address), max_mint = sp.nat, metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), pause = sp.bool, success_nft_base_url = sp.string, token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("burn_address", ("distribution", ("failure_nft_base_url", ("game_ledger", ("game_price", ("game_reward", ("hux_amount", ("hux_contract_address", ("last_failure_id", ("last_success_id", ("ledger", ("max_mint", ("metadata", ("next_token_id", ("operators", ("pause", ("success_nft_base_url", "token_metadata")))))))))))))))))))), "transferToken": sp.lambda_(sp.record(amount = sp.nat, receiver = sp.address, sender = sp.address, token_contract = sp.address, token_id = sp.nat).layout(("amount", ("receiver", ("sender", ("token_contract", "token_id"))))), sp.unit, with_operations=True) }
tviews = { "all_tokens": ((), sp.list(sp.nat)), "get_balance": (sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id")), sp.nat), "total_supply": (sp.record(token_id = sp.nat).layout("token_id"), sp.int), "is_operator": (sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.bool) }
