// WARNING: This file is autogenerated and should NOT be modified
{
    "build": "0.48.0",
    "configHash": "1a355dc0f4d34d631facc8833eed88ee4250d6b0fc54cde6aa6657722e3994f1",
    "tasks": {
        "clean": {
            "type": "npm",
            "name": "@taqueria/plugin-core"
        },
        "start sandbox": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "stop sandbox": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "restart sandbox": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "list accounts": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "bake": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "show protocols": {
            "type": "npm",
            "name": "@taqueria/plugin-flextesa"
        },
        "deploy": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "transfer": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "fund": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "instantiate-account": {
            "type": "npm",
            "name": "@taqueria/plugin-taquito"
        },
        "compile": {
            "type": "npm",
            "name": "@taqueria/plugin-smartpy"
        },
        "compile-all": {
            "type": "npm",
            "name": "@taqueria/plugin-smartpy"
        },
        "test": {
            "type": "npm",
            "name": "@taqueria/plugin-smartpy"
        }
    },
    "operations": {},
    "templates": {},
    "plugins": [
        {
            "name": "@taqueria/plugin-core",
            "version": "0.1",
            "schema": "1.0",
            "alias": "core",
            "tasks": [
                {
                    "task": "clean",
                    "command": "clean",
                    "description": "Clean all the Taqueria-related docker images",
                    "encoding": "application/json",
                    "handler": "proxy"
                }
            ],
            "operations": [],
            "templates": []
        },
        {
            "name": "@taqueria/plugin-flextesa",
            "version": "0.1",
            "schema": "1.0",
            "alias": "flextesa",
            "tasks": [
                {
                    "task": "start sandbox",
                    "command": "start sandbox",
                    "aliases": [
                        "start flextesa"
                    ],
                    "description": "Starts a flextesa sandbox",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "stop sandbox",
                    "command": "stop sandbox",
                    "aliases": [
                        "stop flextesa"
                    ],
                    "description": "Stops a flextesa sandbox",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "restart sandbox",
                    "command": "restart sandbox",
                    "aliases": [
                        "restart flextesa"
                    ],
                    "description": "Restarts a flextesa sandbox",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "list accounts",
                    "command": "list accounts",
                    "aliases": [],
                    "description": "List the balances of all sandbox accounts",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": []
                },
                {
                    "task": "bake",
                    "command": "bake",
                    "aliases": [
                        "b"
                    ],
                    "description": "Manually bake a block. Use when the \"baking\" setting of a flextesa sandbox is set to \"disabled\".",
                    "encoding": "none",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "w",
                            "flag": "watch",
                            "description": "Watch for operations as they are injected into the mempool and bake them as immediate as possible.",
                            "boolean": true
                        }
                    ]
                },
                {
                    "task": "show protocols",
                    "command": "show protocols",
                    "aliases": [
                        "list protocols"
                    ],
                    "description": "List protocols understood by this version of Flextesa",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": []
                }
            ],
            "operations": [],
            "templates": []
        },
        {
            "name": "@taqueria/plugin-taquito",
            "version": "0.1",
            "schema": "1.0",
            "alias": "taquito",
            "tasks": [
                {
                    "task": "deploy",
                    "command": "deploy <contract>",
                    "aliases": [
                        "originate"
                    ],
                    "description": "Deploy a smart contract to a particular environment",
                    "encoding": "application/json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "alias",
                            "description": "Alias used to refer to the deployed contract's address",
                            "required": false
                        },
                        {
                            "flag": "storage",
                            "description": "Name of the storage file that contains the storage value as a Michelson expression, in the artifacts directory, used for originating a contract",
                            "required": false
                        },
                        {
                            "flag": "sender",
                            "description": "Name of an instantiated account to use as the sender of the originate operation",
                            "required": false
                        },
                        {
                            "flag": "mutez",
                            "description": "Amount of Mutez to transfer",
                            "required": false
                        },
                        {
                            "shortFlag": "t",
                            "flag": "timeout",
                            "description": "Number of retry attempts (to avoid congestion and network failures)",
                            "defaultValue": 40,
                            "required": false
                        }
                    ]
                },
                {
                    "task": "transfer",
                    "command": "transfer <contract>",
                    "aliases": [
                        "call"
                    ],
                    "description": "Transfer/call an implicit account or a smart contract (specified via its alias or address) deployed to a particular environment",
                    "encoding": "application/json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "mutez",
                            "description": "Amount of Mutez to transfer",
                            "required": false
                        },
                        {
                            "flag": "param",
                            "description": "Name of the parameter file that contains the parameter value as a Michelson expression, in the artifacts directory, used for invoking a deployed contract",
                            "required": false
                        },
                        {
                            "flag": "entrypoint",
                            "description": "You may explicitly specify an entrypoint to make the parameter value shorter, without having to specify a chain of (Left (Right ... 14 ...))",
                            "required": false
                        },
                        {
                            "flag": "sender",
                            "description": "Name of an instantiated account to use as the sender of the transfer operation",
                            "required": false
                        },
                        {
                            "shortFlag": "t",
                            "flag": "timeout",
                            "description": "Number of retry attempts (to avoid congestion and network failures)",
                            "defaultValue": 40,
                            "required": false
                        }
                    ]
                },
                {
                    "task": "fund",
                    "command": "fund",
                    "description": "Fund all the instantiated accounts up to the desired/declared amount in a target environment",
                    "encoding": "application/json",
                    "handler": "proxy",
                    "options": [
                        {
                            "shortFlag": "t",
                            "flag": "timeout",
                            "description": "Number of retry attempts (to avoid congestion and network failures)",
                            "defaultValue": 40,
                            "required": false
                        }
                    ]
                },
                {
                    "task": "instantiate-account",
                    "command": "instantiate-account",
                    "description": "Instantiate all accounts declared in the \"accounts\" field at the root level of the config file to a target environment",
                    "encoding": "application/json",
                    "handler": "proxy"
                }
            ],
            "operations": [],
            "templates": []
        },
        {
            "name": "@taqueria/plugin-smartpy",
            "version": "0.1",
            "schema": "1.0",
            "alias": "smartpy",
            "tasks": [
                {
                    "task": "compile",
                    "command": "compile <sourceFile>",
                    "aliases": [
                        "c",
                        "compile-smartpy"
                    ],
                    "description": "Compile a smart contract written in a SmartPy syntax to Michelson code, along with its associated storage values, per compilation targets, and some expressions per expression compilation targets",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "json",
                            "description": "Emit JSON-encoded Michelson",
                            "boolean": true
                        }
                    ]
                },
                {
                    "task": "compile-all",
                    "command": "compile-all",
                    "description": "Compile all SmartPy smart contracts with at least one SmartPy compilation target to Michelson code, along with their associated storage values, per compilation targets, and some expressions per expression compilation targets",
                    "encoding": "json",
                    "handler": "proxy",
                    "options": [
                        {
                            "flag": "json",
                            "description": "Emit JSON-encoded Michelson",
                            "boolean": true
                        }
                    ]
                },
                {
                    "task": "test",
                    "command": "test <sourceFile>",
                    "description": "Test a smart contract written in SmartPy",
                    "encoding": "json",
                    "handler": "proxy"
                }
            ],
            "operations": [],
            "templates": []
        }
    ]
}